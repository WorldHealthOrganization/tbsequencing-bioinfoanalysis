import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

def AddDataLocation(dynamicRecord):
    if dynamicRecord["filepath"].startswith("ftp://download.big.ac.cn/"):
        dynamicRecord["datalocation"]="NGDC-CNCB"
    else:
        dynamicRecord["datalocation"]="S3"
    dynamicRecord["library_layout"] = "PAIRED"
    return dynamicRecord

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME', "database_name", "postgres_db_name"])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

datasource0 = glueContext.create_dynamic_frame.from_catalog(database = args["database_name"], table_name = "sequencing_data", transformation_ctx = "datasource0")

datasource1 = glueContext.create_dynamic_frame.from_catalog(database = args["database_name"], table_name = f"{args['postgres_db_name']}_public_submission_sample")

join2 = Join.apply(frame1 = datasource0, frame2 = datasource1, keys1 = "sampleid", keys2 = "id", transformation_ctx="join2")

mapped3 = Map.apply(frame = join2, f = AddDataLocation)

applymapping1 = ApplyMapping.apply(frame = mapped3, mappings = [("id", "int", "sample_id", "int"), ("datalocation", "string", "data_location", "string"), ("libraryid", "string", "library_name", "string"), ("filepath", "string", "file_path", "string"), ("librarypreparationstrategy", "string", "library_preparation_strategy", "string"), ("sequencingplatform", "string", "sequencing_platform", "string"), ("library_layout", "string", "library_layout", "string"), ("assay", "string", "assay", "string")], transformation_ctx = "applymapping1")

selectfields2 = SelectFields.apply(frame = applymapping1, paths = ["file_path", "assay", "dna_source", "sequencing_machine", "library_name", "sequencing_data_id", "library_preparation_strategy", "data_location", "library_layout", "sequencing_platform", "dna_selection", "sample_id"], transformation_ctx = "selectfields2")

resolvechoice3 = ResolveChoice.apply(frame = selectfields2, choice = "MATCH_CATALOG", database = args["database_name"], table_name = f"{args['postgres_db_name']}_genphensql_sequencing_data", transformation_ctx = "resolvechoice3")

resolvechoice4 = ResolveChoice.apply(frame = resolvechoice3, choice = "make_cols", transformation_ctx = "resolvechoice4")

datasink5 = glueContext.write_dynamic_frame.from_catalog(frame = resolvechoice4, database = args["database_name"], table_name = f"{args['postgres_db_name']}_genphensql_sequencing_data", transformation_ctx = "datasink5")

job.commit()