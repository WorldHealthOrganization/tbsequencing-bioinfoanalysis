{
    "Comment": "Master pipeline for analysis workflow.",
    "StartAt": "DefineDefaults",
    "States": {
        "DefineDefaults": {
            "Type": "Pass",
            "Next": "ApplyDefaults",
            "ResultPath": "$.InputDefaults",
            "Parameters": {
                "AssemblyName": "ASM19595v2",
                "KrakenDbName": "mycobacterium",
                "NucleotideAccession": "NC_000962.3",
                "RefseqAssemblyAccession": "GCF_000195955.2",
                "RDSQuery": "UPDATE submission_sample SET bioanalysis_status = 'Unprocessed' WHERE id IN (SELECT DISTINCT s_sample.id FROM submission_sample s_sample INNER JOIN submission_pdstest pdst ON s_sample.id = pdst.sample_id INNER JOIN submission_sequencingdata s_data ON s_sample.id = s_data.sample_id WHERE bioanalysis_status is null AND sequencing_platform='ILLUMINA' AND library_layout='PAIRED' AND library_preparation_strategy='WGS' and staging='f');",
                "DbConnection": {
                    "Port": "${DbPort}",
                    "User": "${DbUser}",
                    "Name": "${DbName}",
                    "Region": "${Region}",
                    "Endpoint": "${DbHost}"
                },
                "FSxStorageCapacity": 4800,
                "Concurrency": 40
            }
        },
        "ApplyDefaults": {
            "Type": "Pass",
            "Next": "ExtractDefaults",
            "ResultPath": "$",
            "Parameters": {
                "ParametersWithDefaults.$": "States.JsonMerge($.InputDefaults, $$.Execution.Input, false)"
            }
        },
        "ExtractDefaults": {
            "Type": "Pass",
            "Next": "ConcurrencyProtectionGetStatus",
            "ResultPath": "$",
            "Parameters": {
                "AssemblyName.$": "$.ParametersWithDefaults.AssemblyName",
                "KrakenDbName.$": "$.ParametersWithDefaults.KrakenDbName",
                "NucleotideAccession.$": "$.ParametersWithDefaults.NucleotideAccession",
                "RefseqAssemblyAccession.$": "$.ParametersWithDefaults.RefseqAssemblyAccession",
                "RDSQuery.$": "$.ParametersWithDefaults.RDSQuery",
                "DbConnection.$": "$.ParametersWithDefaults.DbConnection",
                "FSxStorageCapacity.$": "$.ParametersWithDefaults.FSxStorageCapacity",
                "Concurrency.$": "$.ParametersWithDefaults.Concurrency"
            }
        },
        "ConcurrencyProtectionGetStatus": {
            "Type": "Task",
            "Resource": "arn:aws:states:::aws-sdk:sfn:listExecutions",
            "Parameters": {
                "StateMachineArn.$": "$$.StateMachine.Id",
                "StatusFilter": "RUNNING"
            },
            "Next": "ConcurrencyProtectionCheck",
            "ResultSelector": {
                "Count.$": "States.ArrayLength($.Executions)",
                "Items.$": "$.Executions"
            },
            "ResultPath": "$.ConcurrencyProtectionRuns"
        },
        "ConcurrencyProtectionCheck": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.ConcurrencyProtectionRuns.Count",
                    "NumericGreaterThan": 1,
                    "Next": "FailEnd"
                }
            ],
            "Default": "PrepareStateMachinesArns"
        },
        "FailEnd": {
            "Type": "Fail",
            "Error": "ConcurrencyProtectionTriggered",
            "Cause": "Another instance is running in parallel, skipping this one"
        },
        "PrepareStateMachinesArns": {
            "Type": "Pass",
            "Parameters": {
                "StateMachinesArns.$": "States.Array('${WorkflowDataInsertionArn}', '${WorkflowVariantAnnotationArn}')"
            },
            "ResultPath": "$.StateMachines",
            "Next": "GlobalConcurrencyProtectionMap"
        },
        "GlobalConcurrencyProtectionMap": {
            "Type": "Map",
            "ItemsPath": "$.StateMachines.StateMachinesArns",
            "MaxConcurrency": 0,
            "ResultPath": null,
            "Parameters": {
                "StateMachineId.$": "$$.Map.Item.Value"
            },
            "Next": "PrepareSamples",
            "Iterator": {
                "StartAt": "GlobalConcurrencyProtectionGetStatus",
                "States": {
                    "GlobalConcurrencyProtectionGetStatus": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::aws-sdk:sfn:listExecutions",
                        "Parameters": {
                            "StateMachineArn.$": "$.StateMachineId",
                            "StatusFilter": "RUNNING"
                        },
                        "Next": "GlobalConcurrencyProtectionCheck",
                        "ResultSelector": {
                            "Count.$": "States.ArrayLength($.Executions)",
                            "Items.$": "$.Executions"
                        },
                        "ResultPath": "$.GlobalConcurrencyProtectionRuns"
                    },
                    "GlobalConcurrencyProtectionCheck": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.GlobalConcurrencyProtectionRuns.Count",
                                "NumericGreaterThan": 0,
                                "Next": "GlobalConcurrencyProtectionTriggered"
                            }
                        ],
                        "Default": "GlobalConcurrencyProtectionPassed"
                    },
                    "GlobalConcurrencyProtectionTriggered": {
                        "Type": "Fail",
                        "Error": "GlobalConcurrencyProtectionTriggered",
                        "Cause": "Another instance is running in parallel, skipping this one"
                    },
                    "GlobalConcurrencyProtectionPassed": {
                        "Type": "Pass",
                        "End": true
                    }
                }
            }
        },
        "PrepareSamples": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${PrepareSamples}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query.$": "$.RDSQuery"
                }
            },
            "ResultPath": null,
            "Next": "GetSamples"
        },
        "GetSamples": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${GetSamples}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "WITH unpro AS (SELECT distinct id sampleid FROM submission_sample WHERE bioanalysis_status = 'Unprocessed' LIMIT(5000)) SELECT '{\"Ids\":['||string_agg(unpro.sampleid::text, ',')||']}' FROM unpro;"
                }
            },
            "ResultPath": "$.Samples",
            "ResultSelector": {
                "Value.$": "$.Payload"
            },
            "Next": "checkForSamplesAvailability"
        },
        "checkForSamplesAvailability": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.Samples.Value[0][0]",
                    "IsNull": true,
                    "Next": "NoSampleToProcess"
                }
            ],
            "Default": "formatSampleArray"
        },
        "formatSampleArray": {
            "Type": "Pass",
            "Next": "createResources",
            "Parameters": {
                "List.$": "States.StringToJson($.Samples.Value[0][0])"
            },
            "ResultPath": "$.Samples"
        },
        "createResources": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": "$.Resources",
            "Parameters": {
                "StateMachineArn": "${WorkflowFSxResourcesCreationArn}",
                "Input.$": "$"
            },
            "Next": "passOutputValues",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "FailEnd"
                }
            ],
            "ResultSelector": {
                "List.$": "States.StringToJson($.Output)"
            }
        },
        "passOutputValues": {
            "Type": "Pass",
            "Next": "DownloadReferences",
            "Parameters": {
                "JobQueueArn.$": "$.Resources.List.JobQueueArn",
                "FSxId.$": "$.Resources.List.FSxId",
                "LaunchTemplateId.$": "$.Resources.List.LaunchTemplateId",
                "ComputeEnvArn.$": "$.Resources.List.ComputeEnvArn",
                "RDSQuery.$": "$.RDSQuery",
                "OutputBucket": "${OutputBucket}",
                "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                "DbConnection.$": "$.DbConnection",
                "AssemblyName.$": "$.AssemblyName",
                "NucleotideAccession.$": "$.NucleotideAccession",
                "KrakenDbName.$": "$.KrakenDbName",
                "Samples.$": "$.Samples",
                "Concurrency.$": "$.Concurrency"
            }
        },
        "DownloadReferences": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": null,
            "Parameters": {
                "StateMachineArn": "${WorkflowPrepareReferencesArn}",
                "Input.$": "$"
            },
            "Next": "VariantCalling (1)",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "DeleteResources"
                }
            ]
        },
        "VariantCalling (1)": {
            "Type": "Map",
            "MaxConcurrencyPath": "$.Concurrency",
            "ResultPath": null,
            "ToleratedFailurePercentage": 100,
            "ItemsPath": "$.Samples.Value",
            "Parameters": {
                "SampleId.$": "$$.Map.Item.Value[0]",
                "JobQueueArn.$": "$.JobQueueArn",
                "DbConnection.$": "$.DbConnection",
                "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                "AssemblyName.$": "$.AssemblyName",
                "NucleotideAccession.$": "$.NucleotideAccession",
                "KrakenDbName.$": "$.KrakenDbName",
                "FSxId.$": "$.FSxId",
                "LaunchTemplateId.$": "$.LaunchTemplateId",
                "ComputeEnvArn.$": "$.ComputeEnvArn",
                "OutputBucket.$": "$.OutputBucket"
            },
            "ItemProcessor": {
                "ProcessorConfig": {
                    "Mode": "DISTRIBUTED",
                    "ExecutionType": "STANDARD"
                },
                "StartAt": "VariantCallingExecution (1)",
                "States": {
                    "VariantCallingExecution (1)": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::states:startExecution.sync",
                        "ResultPath": null,
                        "Parameters": {
                            "StateMachineArn": "${WorkflowVariantCallingArn}",
                            "Input": {
                                "SampleId.$": "$.SampleId",
                                "JobQueueArn.$": "$.JobQueueArn",
                                "DbConnection.$": "$.DbConnection",
                                "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                                "AssemblyName.$": "$.AssemblyName",
                                "NucleotideAccession.$": "$.NucleotideAccession",
                                "KrakenDbName.$": "$.KrakenDbName"
                            },
                            "Name.$": "States.Format('{}_{}', $.SampleId, $$.Execution.Name)"
                        },
                        "Next": "OverrideVariantCallingResult (1)",
                        "Catch": [
                            {
                                "ErrorEquals": [
                                    "States.ALL"
                                ],
                                "Next": "OverrideVariantCallingResult (1)"
                            }
                        ]
                    },
                    "OverrideVariantCallingResult (1)": {
                        "Type": "Pass",
                        "Parameters": null,
                        "OutputPath": null,
                        "ResultPath": "$",
                        "End": true
                    }
                }
            },
            "Next": "Success"
        },
        "Success": {
            "Type": "Pass",
            "Result": {
                "Value": "Succeeded"
            },
            "ResultPath": "$.ExtractionStatus",
            "Next": "checkNonEmptiness"
        },
        "checkNonEmptiness": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.Samples.Value[0]",
                    "IsPresent": false,
                    "Next": "DeleteResources"
                }
            ],
            "Default": "UploadToS3"
        },
        "DeleteResources": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": null,
            "Parameters": {
                "StateMachineArn": "${WorkflowFSxResourcesDeletionArn}",
                "Input": {
                    "SampleId.$": "$.SampleId",
                    "JobQueueArn.$": "$.JobQueueArn",
                    "DbConnection.$": "$.DbConnection",
                    "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                    "AssemblyName.$": "$.AssemblyName",
                    "NucleotideAccession.$": "$.NucleotideAccession",
                    "KrakenDbName.$": "$.KrakenDbName"
                },
                "Name.$": "States.Format('{}_{}', $.SampleId, $$.Execution.Name)"
            },
            "Next": "ChoiceExtractionStatus",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "FailEnd"
                }
            ]
        },
        "UploadToS3": {
            "Type": "Task",
            "Resource": "arn:aws:states:::batch:submitJob.sync",
            "ResultPath": null,
            "Parameters": {
                "JobName": "upload-to-s3",
                "JobDefinition": "${BioPython}",
                "JobQueue.$": "$.JobQueueArn",
                "ContainerOverrides": {
                    "Command": [
                        "/scripts/export_to_s3.py",
                        "--output_bucket",
                        "Ref::OutputBucket"
                    ]
                },
                "Parameters": {
                    "OutputBucket.$": "$.OutputBucket"
                }
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "UpdateStatusFailed"
                }
            ],
            "Next": "UpdateStatus"
        },
        "UpdateStatus": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${UpdateStatus}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "UPDATE submission_sample\n SET    bioanalysis_status = 'Uploaded to S3', bioanalysis_status_changed_at=now() \n WHERE bioanalysis_status = 'Extracted' AND id in %s;",
                    "QueryParams.$": "States.Array($.FlattenedSamples)"
                }
            },
            "ResultPath": null,
            "Next": "DeleteResources"
        },
        "UpdateStatusFailed": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${UpdateStatus}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "UPDATE submission_sample\n SET    bioanalysis_status = 'Failed to upload', bioanalysis_status_changed_at=now() \n WHERE bioanalysis_status = 'Extracted' AND id in %s;",
                    "QueryParams.$": "States.Array($.FlattenedSamples)"
                }
            },
            "ResultPath": null,
            "Next": "FailEnd"
        },
        "ChoiceExtractionStatus": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.ExtractionStatus",
                    "IsPresent": false,
                    "Next": "FailEnd"
                }
            ],
            "Default": "DataInsertionExecution"
        },
        "DataInsertionExecution": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": null,
            "Parameters": {
                "StateMachineArn": "${WorkflowDataInsertionArn}",
                "Input": {
                    "DbConnection.$": "$.DbConnection"
                },
                "Name.$": "States.Format('{}', $$.Execution.Name)"
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "FailEnd"
                }
            ],
            "Next": "VariantAnnotationExecution"
        },
        "VariantAnnotationExecution": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": null,
            "Parameters": {
                "StateMachineArn": "${WorkflowVariantAnnotationArn}",
                "Input": {
                    "DbConnection.$": "$.DbConnection",
                    "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                    "AssemblyName.$": "$.AssemblyName",
                    "NucleotideAccession.$": "$.NucleotideAccession"
                },
                "Name.$": "States.Format('{}', $$.Execution.Name)"
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "FailEnd"
                }
            ],
            "Next": "StatsCalculationExecution"
        },
        "StatsCalculationExecution": {
            "Type": "Task",
            "Resource": "arn:aws:states:::states:startExecution.sync",
            "ResultPath": null,
            "Parameters": {
                "StateMachineArn": "${WorkflowStatsCalculationArn}",
                "Input": {
                    "DbConnection.$": "$.DbConnection"
                },
                "Name.$": "States.Format('{}', $$.Execution.Name)"
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "ResultPath": "$.error",
                    "Next": "FailEnd"
                }
            ],
            "End": true
        },
        "NoSampleToProcess": {
            "Type": "Succeed"
        }
    }
}