{
    "Comment": "Per sample analysis workflow. Receives the sample name and a batch queue, starts the analysis and captures errors.",
    "StartAt": "updateSampleStatus",
    "States": {
        "updateSampleStatus": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${LambdaQueryRDS}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "UPDATE submission_sample\n SET    bioanalysis_status = 'Processing taxonomy', bioanalysis_status_changed_at=now() \n WHERE  id = %s \n;",
                    "QueryParams.$": "States.Array($.SampleId)"
                }
            },
            "ResultPath": null,
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 1
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "passFailStatus"
                }
            ],
            "Next": "getLibraryIdsForSample"
        },
        "getLibraryIdsForSample": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${LambdaQueryRDS}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "WITH min_library_name (id, library_name) AS ( SELECT id, MIN(library_name) FROM submission_sequencingdata where sample_id=%s  group by id ORDER by id ASC ) SELECT DISTINCT MIN(sq.library_name) as library_name, sq.data_location, CASE WHEN sq.library_preparation_strategy='WGS' THEN 'WGS' WHEN Assay IS NOT NULL THEN Assay ELSE 'drug_resistance_genes' END, agg_files.files_paths FROM submission_sequencingdata sq CROSS JOIN ( SELECT array_agg(files.file_path) as files_paths FROM ( SELECT DISTINCT sq.file_path FROM submission_sequencingdata sq INNER JOIN submission_sequencingdatahash sqh ON sqh.sequencing_data_id = sq.id INNER JOIN submission_sample ss ON ss.id = sq.sample_id WHERE ss.id=%s AND sq.sequencing_platform='ILLUMINA' AND sq.library_layout='PAIRED') files ) agg_files INNER JOIN submission_sample ss ON ss.id = sq.sample_id WHERE ss.id=%s AND sq.sequencing_platform='ILLUMINA' AND sq.library_layout='PAIRED' GROUP BY sq.data_location, sq.library_preparation_strategy, sq.assay, agg_files.files_paths;",
                    "QueryParams.$": "States.Array($.SampleId, $.SampleId, $.SampleId)"
                }
            },
            "ResultPath": "$.LibraryIds",
            "ResultSelector": {
                "Value.$": "$.Payload"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 1
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "passFailStatus"
                }
            ],
            "Next": "getLibraryCountForSample"
        },
        "getLibraryCountForSample": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${LambdaQueryRDS}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "SELECT count(DISTINCT sq.library_name) FROM submission_sequencingdata sq INNER  JOIN submission_sample ss ON ss.id = sq.sample_id WHERE ss.id=%s AND sq.library_layout='PAIRED' AND sq.sequencing_platform='ILLUMINA' AND sq.library_name is not NULL;",
                    "QueryParams.$": "States.Array($.SampleId)"
                }
            },
            "ResultPath": "$.LibraryCounts",
            "ResultSelector": {
                "Value.$": "$.Payload[0][0]"
            },
            "Retry": [
                {
                    "ErrorEquals": [
                        "States.TaskFailed"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 5,
                    "BackoffRate": 1
                }
            ],
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "passFailStatus"
                }
            ],
            "Next": "checkNonEmptiness"
        },
        "checkNonEmptiness": {
            "Type": "Choice",
            "Choices": [
                {
                    "Variable": "$.LibraryCounts.Value",
                    "NumericEquals": 0,
                    "Next": "passFailStatus"
                }
            ],
            "Default": "IterateLibraries"
        },
        "IterateLibraries": {
            "Type": "Map",
            "MaxConcurrency": 50,
            "ResultPath": "$",
            "OutputPath": "$[0]",
            "ItemsPath": "$.LibraryIds.Value",
            "Parameters": {
                "Execution.$": "$$.Execution.Name",
                "JobQueueArn.$": "$.JobQueueArn",
                "SampleId.$": "$.SampleId",
                "RefseqAssemblyAccession.$": "$.RefseqAssemblyAccession",
                "AssemblyName.$": "$.AssemblyName",
                "ReferenceName.$": "States.Format('{}_{}', $.RefseqAssemblyAccession, $.AssemblyName)",
                "NucleotideAccession.$": "$.NucleotideAccession",
                "KrakenDbName.$": "$.KrakenDbName",
                "SampleType.$": "$$.Map.Item.Value[2]",
                "FastqId.$": "$$.Map.Item.Value[0]",
                "Location.$": "$$.Map.Item.Value[1]",
                "LibraryCounts.$": "$.LibraryCounts",
                "DbConnection.$": "$.DbConnection",
                "SequencingFile": {
                    "FilePath.$": "$$.Map.Item.Value[3]"
                }
            },
            "Next": "passSuccessStatus",
            "Iterator": {
                "StartAt": "ChoiceFastqIdReplace",
                "States": {
                    "ChoiceFastqIdReplace": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Or": [
                                    {
                                        "Variable": "$.FastqId",
                                        "StringEquals": ""
                                    },
                                    {
                                        "Variable": "$.FastqId",
                                        "IsNull": true
                                    }
                                ],
                                "Next": "ReplaceFastqId"
                            }
                        ],
                        "Default": "ChoiceSampleOriginForDownload"
                    },
                    "ReplaceFastqId": {
                        "Type": "Pass",
                        "Parameters": {
                            "Id.$": "States.Format('lib_{}', $.SampleId)"
                        },
                        "ResultPath": "$.FastqId",
                        "Next": "FixJSON"
                    },
                    "FixJSON": {
                        "Type": "Pass",
                        "InputPath": "$.FastqId.Id",
                        "ResultPath": "$.FastqId",
                        "Next": "ChoiceSampleOriginForDownload"
                    },
                    "ChoiceSampleOriginForDownload": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.Location",
                                "StringEquals": "NCBI",
                                "Next": "SRAPass"
                            }
                        ],
                        "Default": "S3Pass"
                    },
                    "S3Pass": {
                        "Type": "Pass",
                        "Result": {
                            "R1Suffix": "R1.fastq.gz",
                            "R2Suffix": "R2.fastq.gz"
                        },
                        "ResultPath": "$.Reads",
                        "Next": "IterateCopyReadsFromS3"
                    },
                    "SRAPass": {
                        "Type": "Pass",
                        "Result": {
                            "R1Suffix": "1.fastq",
                            "R2Suffix": "2.fastq"
                        },
                        "ResultPath": "$.Reads",
                        "Next": "ChoiceDownloadProtocol"
                    },
                    "ChoiceDownloadProtocol": {
                        "Type": "Choice",
                        "Choices": [
                            {
                                "Variable": "$.SRADownloadProtocol",
                                "IsPresent": true,
                                "Next": "DownloadReadsFromSRA"
                            }
                        ],
                        "Default": "CopySRAFromS3"
                    },
                    "CopySRAFromS3": {
                        "Type": "Task",
                        "ResultPath": null,
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "Parameters": {
                            "JobName": "CopyReadsFromS3",
                            "JobDefinition": "${BioPython}",
                            "JobQueue.$": "$.JobQueueArn",
                            "ContainerOverrides": {
                                "Command": [
                                    "/scripts/copy_fastq_from_s3.py",
                                    "--fastq_id",
                                    "Ref::FASTQ_ID",
                                    "--sample_id",
                                    "Ref::SAMPLE_ID"
                                ]
                            },
                            "Parameters": {
                                "FASTQ_ID.$": "$.FastqId",
                                "SAMPLE_ID.$": "$.SampleId"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Batch.AWSBatchException"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 10,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "NormalizeSRA"
                    },
                    "NormalizeSRA": {
                        "Type": "Task",
                        "ResultPath": null,
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "Parameters": {
                            "JobName": "fasterq-dump",
                            "JobDefinition": "${Sratools}",
                            "JobQueue.$": "$.JobQueueArn",
                            "ContainerOverrides": {
                                "Command": [
                                    "/bin/bash",
                                    "/scripts/normalized_to_fastq.sh",
                                    "Ref::SAMPLE_ID",
                                    "Ref::FASTQ_ID"
                                ]
                            },
                            "Parameters": {
                                "SAMPLE_ID.$": "$.SampleId",
                                "FASTQ_ID.$": "$.FastqId"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Batch.AWSBatchException"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 10,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "Kraken"
                    },
                    "DownloadReadsFromSRA": {
                        "Type": "Task",
                        "ResultPath": null,
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "Parameters": {
                            "JobName": "fasterq-dump",
                            "JobDefinition": "${Sratools}",
                            "JobQueue.$": "$.JobQueueArn",
                            "ContainerOverrides": {
                                "Command": [
                                    "/bin/bash",
                                    "/scripts/fasterq_dump.sh",
                                    "Ref::SAMPLE_ID",
                                    "Ref::FASTQ_ID"
                                ]
                            },
                            "Parameters": {
                                "SAMPLE_ID.$": "$.SampleId",
                                "FASTQ_ID.$": "$.FastqId"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Batch.AWSBatchException"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 10,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "Kraken"
                    },
                    "Kraken": {
                        "Type": "Task",
                        "ResultPath": null,
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "Parameters": {
                            "JobName": "kraken",
                            "JobDefinition": "${Kraken}",
                            "JobQueue.$": "$.JobQueueArn",
                            "ContainerOverrides": {
                                "Command": [
                                    "/bin/bash",
                                    "-c",
                                    "Ref::COMMAND"
                                ]
                            },
                            "Parameters": {
                                "COMMAND.$": "States.Format('kraken2 --db references/{} --threads 1 --report {}/{}-kraken.txt --paired {}/*.f*q* > {}/{}-kraken-full.txt', $.KrakenDbName, $.SampleId, $.SampleId, $.SampleId, $.SampleId, $.SampleId)"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Batch.AWSBatchException"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 10,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "PrepareKraken"
                    },
                    "PrepareKraken": {
                        "Type": "Task",
                        "ResultPath": null,
                        "Resource": "arn:aws:states:::batch:submitJob.sync",
                        "Parameters": {
                            "JobName": "prepare-kraken",
                            "JobDefinition": "${BioPython}",
                            "JobQueue.$": "$.JobQueueArn",
                            "ContainerOverrides": {
                                "Command": [
                                    "/scripts/format_taxonomy_assignment.py",
                                    "Ref::FILE"
                                ]
                            },
                            "Parameters": {
                                "FILE.$": "States.Format('{}/{}', $.SampleId, $.SampleId)"
                            }
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Batch.AWSBatchException"
                                ],
                                "IntervalSeconds": 5,
                                "MaxAttempts": 10,
                                "BackoffRate": 2
                            }
                        ],
                        "End": true
                    },
                    "IterateCopyReadsFromS3": {
                        "Type": "Map",
                        "MaxConcurrency": 50,
                        "ResultPath": null,
                        "ItemsPath": "$.SequencingFile.FilePath",
                        "Parameters": {
                            "SampleId.$": "$.SampleId",
                            "FastqPath.$": "$$.Map.Item.Value",
                            "Index.$": "$$.Map.Item.Index",
                            "FastqId.$": "$.FastqId",
                            "JobQueueArn.$": "$.JobQueueArn"
                        },
                        "Next": "Kraken",
                        "Iterator": {
                            "StartAt": "CopyReadsFromS3",
                            "States": {
                                "CopyReadsFromS3": {
                                    "Type": "Task",
                                    "ResultPath": null,
                                    "Resource": "arn:aws:states:::batch:submitJob.sync",
                                    "Parameters": {
                                        "JobName": "CopyReadsFromS3",
                                        "JobDefinition": "${BioPython}",
                                        "JobQueue.$": "$.JobQueueArn",
                                        "ContainerOverrides": {
                                            "Command": [
                                                "/scripts/copy_fastq_from_s3.py",
                                                "--fastq_path",
                                                "Ref::FASTQ_PATH",
                                                "--fastq_id",
                                                "Ref::FASTQ_ID",
                                                "--sample_id",
                                                "Ref::SAMPLE_ID",
                                                "--index",
                                                "Ref::INDEX",
                                                "--bucket",
                                                "Ref::BUCKET"
                                            ]
                                        },
                                        "Parameters": {
                                            "FASTQ_PATH.$": "$.FastqPath",
                                            "FASTQ_ID.$": "$.FastqId",
                                            "SAMPLE_ID.$": "$.SampleId",
                                            "INDEX.$": "States.Format('{}', $.Index)",
                                            "BUCKET": "${sequenceDataBucket}"
                                        }
                                    },
                                    "Retry": [
                                        {
                                            "ErrorEquals": [
                                                "Batch.AWSBatchException"
                                            ],
                                            "IntervalSeconds": 5,
                                            "MaxAttempts": 10,
                                            "BackoffRate": 2
                                        }
                                    ],
                                    "End": true
                                }
                            }
                        }
                    }
                }
            },
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "passFailStatus",
                    "ResultPath": null
                }
            ]
        },
        "passFailStatus": {
            "Type": "Pass",
            "Parameters": {
                "SampleId.$": "$.SampleId.Value",
                "JobQueueArn.$": "$.JobQueueArn",
                "DbConnection.$": "$.DbConnection",
                "Result": {
                    "Value": "Taxonomy failed"
                }
            },
            "ResultPath": "$",
            "Next": "WaitThirtySeconds"
        },
        "WaitThirtySeconds": {
            "Type": "Wait",
            "Seconds": 30,
            "Next": "CleanAnalysis"
        },
        "CleanAnalysis": {
            "Type": "Task",
            "ResultPath": null,
            "Resource": "arn:aws:states:::batch:submitJob.sync",
            "Parameters": {
                "JobName": "clean-all",
                "JobDefinition": "${Samtools}",
                "JobQueue.$": "$.JobQueueArn",
                "ContainerOverrides": {
                    "Command": [
                        "/bin/bash",
                        "-c",
                        "Ref::COMMAND"
                    ]
                },
                "Parameters": {
                    "COMMAND.$": "States.Format('rm -rf {}/ */{}-* taxonom-analysis/{}-*', $.SampleId, $.SampleId, $.SampleId)"
                }
            },
            "Next": "UpdateStatus",
            "Catch": [
                {
                    "ErrorEquals": [
                        "States.ALL"
                    ],
                    "Next": "UpdateStatus",
                    "ResultPath": null
                }
            ]
        },
        "passSuccessStatus": {
            "Type": "Pass",
            "Result": {
                "Value": "Taxonomy succeeded"
            },
            "ResultPath": "$.AnalysisStatus",
            "Next": "UpdateStatus"
        },
        "UpdateStatus": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
                "FunctionName": "${LambdaQueryRDS}",
                "Payload": {
                    "DbConnection.$": "$.DbConnection",
                    "CalledFunction": "run_query",
                    "Query": "UPDATE submission_sample\n SET    bioanalysis_status = %s, bioanalysis_status_changed_at=now() \n WHERE  id = %s;",
                    "QueryParams.$": "States.Array($.AnalysisStatus.Value, $.SampleId)"
                }
            },
            "ResultPath": null,
            "Next": "CleanOutput"
        },
        "CleanOutput": {
            "Type": "Pass",
            "Parameters": null,
            "OutputPath": null,
            "ResultPath": "$",
            "End": true
        }
    }
}